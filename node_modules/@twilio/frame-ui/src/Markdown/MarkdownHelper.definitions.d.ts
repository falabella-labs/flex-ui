/**
 * Markdown Item
 * @private
 * @enum { "BOLD" | "ITALIC" | "STRIKETHROUGH" | "UL" | "OL" } MarkdownItem
 * @property {"BOLD"} BOLD - Bold markdown item
 * @property {"ITALIC"} ITALIC - Italic markdown item
 * @property {"STRIKETHROUGH"} STRIKETHROUGH - Strikethrough markdown item
 * @property {"UL"} UNORDERED_LIST - Unordered list markdown item
 * @property {"OL"} ORDERED_LIST - Ordered list markdown item
 */
export declare enum MarkdownItem {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    STRIKETHROUGH = "STRIKETHROUGH",
    UNORDERED_LIST = "UL",
    ORDERED_LIST = "OL"
}
/**
 * Markdown syntax
 * @private
 * @property {string} start syntax start
 * @property {string} [end] syntax end
 */
export interface MarkdownSyntax {
    start: string;
    end?: string;
}
/**
 * Markdown Config
 * @private
 * @property {MarkdownHelper.MarkdownSyntax} syntax markdown syntax
 * @property {Array<string>} [keyboardShortcuts] array of keyboard shortcuts associated witht the syntax. Shortcuts must be Mousetrap or Browser Key Values compatible.
 */
export interface MarkdownConfig {
    syntax: MarkdownSyntax;
    keyboardShortcuts?: Array<string>;
}
/**
 * Markdown
 * @private
 * @typedef {Object} Markdown
 * @memberof MarkdownHelper
 */
export declare type Markdown = {
    [key in MarkdownItem]?: MarkdownConfig;
};
/**
 * Shortcut input element
 * @private
 * @property {string} text text from the element
 * @property {number} selectionStart selection start
 * @property {number} selectionEnd selection end
 */
export interface ShortcutInputElement {
    text: string;
    selectionStart: number;
    selectionEnd: number;
}
/**
 * Keyboard shortcuts
 * @private
 * @class MarkdownHelper
 */
export interface KeyboardShortcuts {
    [k: string]: Array<string>;
}
