import { ChannelState, MemberState } from "./state/ChannelState";
import { Message } from "twilio-chat/lib/message";
/**
 * @classdesc Chat message helper with author name. Extends {@link https://media.twiliocdn.com/sdk/js/chat/releases/3.2.4/docs/Message.html Message}
 * @class ChatMessageHelper
 * @see {@link https://media.twiliocdn.com/sdk/js/chat/releases/3.2.4/docs/Message.html}
 * @hideconstructor
 * @category Helpers
 */
export declare class ChatMessageHelper extends Message {
    /**
     * Message author name. Friendly name if set for the author, otherwise the identity.
     *
     * @name ChatMessageHelper#authorName
     * @type {string}
     */
    authorName: string;
}
/**
 * Helper class for chat channels
 * @class ChatChannelHelper
 * @param {ChannelState} chat chat channel
 * @category Helpers
 * @example
 * import { ChatChannelHelper, StateHelper } from "@twilio/flex-ui";
 * const channelState = StateHelper.getChatChannelStateForTask(task);
 * const chatChannelHelper = new ChatChannelHelper(channelState);
 *
 * console.log(chatChannelHelper.lastMessage); // Returns last message object
 * console.log(chatChannelHelper.typers); // Returns all channel members who are typing
 * console.log(chatChannelHelper.isCustomerOnline); // Returns true if customer is online
 */
export declare class ChatChannelHelper {
    private channel;
    constructor(channel: ChannelState);
    /**
     * Gets last chat message object
     *
     * @readonly
     * @type {ChatMessageHelper}
     */
    readonly lastMessage: ChatMessageHelper;
    /**
     * Gets all channel members which are currently typing (except you)
     *
     * @readonly
     * @type {Array<ChannelsState.MemberState>}
     */
    readonly typers: Array<MemberState>;
    /**
     * Returns true if customer is online, false if not
     *
     * @readonly
     * @type {boolean}
     */
    readonly isCustomerOnline: boolean;
}
