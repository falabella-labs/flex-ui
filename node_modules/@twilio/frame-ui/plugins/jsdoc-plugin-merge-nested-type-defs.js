/**
 * Plugin to expand nested type definitions.
 * See {@link http://usejsdoc.org/about-plugins.html} for more info
 */

exports.handlers = {
    processingComplete(e) {
        const { doclets } = e;

        const mergedInterfaces = {};

        for (let i = 0; i < doclets.length; i++) {
            const doclet = doclets[i];

            if (doclet.kind === "member") {
                const properties = doclet.properties || [];
                const finalProps = [...properties];

                properties.forEach((prop) => {
                    if (prop.type && Array.isArray(prop.type.names)) {
                        prop.type.names.forEach((name) => {
                            const docletWithDef = doclets.find(
                                (d) => d.longname === name && d.memberof === doclet.memberof
                            );

                            if (docletWithDef) {
                                const newProps = docletWithDef.properties || [];
                                newProps.forEach((newProp) => {
                                    finalProps.push({
                                        ...newProp,
                                        name: `${prop.name}.${newProp.name}`
                                    });
                                });
                            }
                        });
                    }
                });

                doclet.properties = finalProps;
            }

            if (doclet.kind === "interface") {
                if (!mergedInterfaces[doclet.longname]) {
                    const commonDoclets = doclets.filter((d) => {
                        return (
                            (d.longname || "").localeCompare(doclet.longname) === 0
                        );
                    });

                    if (commonDoclets.length > 1) {
                        mergedInterfaces[doclet.longname] = true;
                        doclet.properties = commonDoclets
                        .map((d) => d.properties || [])
                        .reduce((all, curr) => {
                            return all.concat(curr);
                        }, []);
                    }
                } else {
                    doclets.splice(i, 1);
                }
            }
        }
    }
};
